version: "3.8"

services:
    rabbitmq:
        image: rabbitmq:3-management-alpine
        container_name: rabbitmq
        ports:
            - "5672:5672"
            - "15672:15672"
        volumes:
            - ~/.docker-conf/rabbitmq/data:/var/lib/rabbitmq
            - ~/.docker-conf/rabbitmq/log:/var/log/rabbitmq
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:15672"]
            interval: 30s
            timeout: 10s
            retries: 5
        networks:
            - app-network

    redis:
        image: redis:alpine
        container_name: redis
        ports:
            - "6380:6379"
        volumes:
            - ~/.docker-conf/redis/data:/data
        command: redis-server --appendonly yes
        networks:
            - app-network

    nginx-proxy:
        image: nginx:latest
        ports:
            - "80:80"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
        depends_on:
            - react-gis-app
        networks:
            - app-network

    react-gis-app:
        build:
            context: ./react-gis-app
            dockerfile: Dockerfile
        ports:
            - "8080:80"
        env_file: react-gis-app/.env.production
        networks:
            - app-network

    coordinates-api:
        build:
            context: ./coordinates-api
            dockerfile: Dockerfile
        deploy:
            replicas: 3
            restart_policy:
                condition: on-failure
        env_file: coordinates-api/.env.production
        command: sh -c './wait-for-it.sh rabbitmq:5672 --timeout=30 -- npm run start'
        networks:
            - app-network

    coordinates-processor:
        build:
            context: ./coordinates-processor
            dockerfile: Dockerfile
        volumes:
            - .:/src
        ports:
            - "3002:3002"
        depends_on:
            - rabbitmq
        env_file: coordinates-processor/.env.production
        command: sh -c './wait-for-it.sh rabbitmq:5672 --timeout=30 -- npm run dev'
        networks:
            - app-network

    socket-server:
        build:
            context: ./socket-server
            dockerfile: Dockerfile
        ports:
            - "3004:3004"
        depends_on:
            - redis
        env_file: socket-server/.env.production
        networks:
            - app-network

networks:
    app-network:
        driver: bridge
