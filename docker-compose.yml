version: "3.8"

services:
    rabbitmq:
        image: rabbitmq:3-management-alpine
        container_name: rabbitmq
        ports:
            - "5673:5672"
            - "15673:15672"
        volumes:
            - ~/.docker-conf/rabbitmq/data:/var/lib/rabbitmq
            - ~/.docker-conf/rabbitmq/log:/var/log/rabbitmq
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:15672"]
            interval: 30s
            timeout: 10s
            retries: 5
        networks:
            - app-network

    redis:
        image: redis:alpine
        container_name: redis
        ports:
            - "6380:6379"
        volumes:
            - ~/.docker-conf/redis/data:/data
        command: redis-server --appendonly yes
        networks:
            - app-network

    nginx:
        image: nginx:alpine
        container_name: nginx-proxy
        ports:
            - "9090:80"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
        depends_on:
            - coordinates-websocket-buses
            - coordinates-websocket-taxis
        networks:
            - app-network

    coordinates-websocket-buses:
        build:
            context: ./coordinates-websocket
            dockerfile: Dockerfile
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        environment:
            - PG_CONNECTION_STRING_SMC=${PG_CONNECTION_STRING}
            - AMQP_URL=${AMQP_URL}
            - QUEUE_NAME=${QUEUE_NAME_BUSES}
        command: sh -c './wait-for-it.sh rabbitmq:5672 --timeout=30 -- npm run start'
        networks:
            - app-network

    coordinates-websocket-taxis:
        build:
            context: ./coordinates-websocket
            dockerfile: Dockerfile
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        environment:
            - PG_CONNECTION_STRING_SMC=${PG_CONNECTION_STRING}
            - AMQP_URL=${AMQP_URL}
            - QUEUE_NAME=${QUEUE_NAME_TAXIS}
        command: sh -c './wait-for-it.sh rabbitmq:5672 --timeout=30 -- npm run start'
        networks:
            - app-network

    coordinates-websocket-bicicletas:
        build:
            context: ./coordinates-websocket
            dockerfile: Dockerfile
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        environment:
            - PG_CONNECTION_STRING_SMC=${PG_CONNECTION_STRING}
            - AMQP_URL=${AMQP_URL}
            - QUEUE_NAME=${QUEUE_NAME_BICICLETAS}
        command: sh -c './wait-for-it.sh rabbitmq:5672 --timeout=30 -- npm run start'
        networks:
            - app-network

    coordinates-processor-buses:
        build:
            context: ./coordinates-processor
            dockerfile: Dockerfile
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        environment:
            - PG_CONNECTION_STRING_SMC=${PG_CONNECTION_STRING}
            - PG_CONNECTION_STRING_TRX=${PG_CONNECTION_STRING_BUSES}
            - AMQP_URL=${AMQP_URL}
            - QUEUE_NAME=${QUEUE_NAME_BUSES}
            - SOCKET_SERVER_URL=${SOCKET_SERVER_URL}
            - REDIS_URL=${REDIS_URL}
        command: sh -c './wait-for-it.sh rabbitmq:5672 --timeout=30 -- npm run start'
        networks:
            - app-network

    coordinates-processor-taxis:
        build:
            context: ./coordinates-processor
            dockerfile: Dockerfile
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        environment:
            - PG_CONNECTION_STRING_SMC=${PG_CONNECTION_STRING}
            - PG_CONNECTION_STRING_TRX=${PG_CONNECTION_STRING_TAXIS}
            - AMQP_URL=${AMQP_URL}
            - QUEUE_NAME=${QUEUE_NAME_TAXIS}
            - SOCKET_SERVER_URL=${SOCKET_SERVER_URL}
            - REDIS_URL=${REDIS_URL}
        command: sh -c './wait-for-it.sh rabbitmq:5672 --timeout=30 -- npm run start'
        networks:
            - app-network

    coordinates-processor-taxis:
        build:
            context: ./coordinates-processor
            dockerfile: Dockerfile
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        environment:
            - PG_CONNECTION_STRING_SMC=${PG_CONNECTION_STRING}
            - PG_CONNECTION_STRING_TRX=${PG_CONNECTION_STRING_BICICLETAS}
            - AMQP_URL=${AMQP_URL}
            - QUEUE_NAME=${QUEUE_NAME_BICICLETAS}
            - SOCKET_SERVER_URL=${SOCKET_SERVER_URL}
            - REDIS_URL=${REDIS_URL}
        command: sh -c './wait-for-it.sh rabbitmq:5672 --timeout=30 -- npm run start'
        networks:
            - app-network

    socket-server:
        build:
            context: ./socket-server
            dockerfile: Dockerfile
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        environment:
            - REDIS_URL=${REDIS_URL}
            - REDIS_EXPIRATION=${REDIS_EXPIRATION}
        depends_on:
            - redis
        networks:
            - app-network

networks:
    app-network:
        driver: bridge
